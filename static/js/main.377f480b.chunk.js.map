{"version":3,"sources":["User.js","App.js","serviceWorker.js","index.js"],"names":["User","name","imgUrl","Fragment","src","alt","App","state","signIn","window","gapi","auth2","getAuthInstance","then","googleUser","profile","getBasicProfile","setState","getName","getImageUrl","signOut","_onInit","console","log","_onError","err","process","load","init","client_id","this","className","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAGMA,EAAO,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACpB,OACE,kBAAC,IAAMC,SAAP,KACE,oEAAYF,EAAZ,KACA,yBAAKG,IAAKF,EAAQG,IAAI,aCqDbC,G,iNAvDbC,MAAQ,CACNN,KAAM,KACNC,OAAQ,M,EAoBVM,OAAS,WACOC,OAAOC,KAAKC,MAAMC,kBAC1BJ,SAASK,MAAK,SAAAC,GAClB,IAAMC,EAAUD,EAAWE,kBAC3B,EAAKC,SAAS,CACZhB,KAAMc,EAAQG,UACdhB,OAAQa,EAAQI,oB,EAItBC,QAAU,WACMX,OAAOC,KAAKC,MAAMC,kBAC1BQ,UAAUP,MAAK,WACnB,EAAKI,SAAS,CACZhB,KAAM,KACNC,OAAQ,W,mFAhCZ,IAAMmB,EAAU,SAAAV,GACdW,QAAQC,IAAI,UAAWZ,IAEnBa,EAAW,SAAAC,GACfH,QAAQC,IAAI,QAASE,IAG3BH,QAAQC,IAAI,MAAOG,2EAEfjB,OAAOC,KAAKiB,KAAK,SAAS,WACxBlB,OAAOC,KAAKC,MACTiB,KAAK,CACJC,UAAWH,4EAEZb,KAAKQ,EAASG,Q,+BAsBX,IAAD,EACkBM,KAAKvB,MAAtBN,EADD,EACCA,KAAMC,EADP,EACOA,OACd,OACE,yBAAK6B,UAAU,OACb,4BAAQA,UAAU,eACd9B,GAAQ,4BAAQ+B,QAASF,KAAKtB,QAAtB,YACPP,GAAQ,4BAAQ+B,QAASF,KAAKV,SAAtB,aACRnB,GAAQ,kBAAC,EAAD,CAAMA,KAAMA,EAAMC,OAAQA,U,GAjD7B+B,cCQEC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,iB","file":"static/js/main.377f480b.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst User = ({ name, imgUrl }) => {\n  return (\n    <React.Fragment>\n      <p>Привет, {name}!</p>\n      <img src={imgUrl} alt=\"profle\" />\n    </React.Fragment>\n  )\n}\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n}\n\nexport { User }","import React, { Component } from 'react'\nimport { User } from './User'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    name: null,\n    imgUrl: null,\n  }\n  componentDidMount() {\n    const _onInit = auth2 => {\n      console.log('init OK', auth2)\n    }\n    const _onError = err => {\n      console.log('error', err)\n    }\n\nconsole.log(\"env\", process.env.REACT_APP_GOOGLE_CLIENT_ID)\n\n    window.gapi.load('auth2', function() {\n      window.gapi.auth2\n        .init({\n          client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n        })\n        .then(_onInit, _onError)\n    })\n  }\n  signIn = () => {\n    const auth2 = window.gapi.auth2.getAuthInstance()\n    auth2.signIn().then(googleUser => {\n      const profile = googleUser.getBasicProfile()\n      this.setState({\n        name: profile.getName(),\n        imgUrl: profile.getImageUrl(),\n      })\n    })\n  }\n  signOut = () => {\n    const auth2 = window.gapi.auth2.getAuthInstance()\n    auth2.signOut().then(() => {\n      this.setState({\n        name: null,\n        imgUrl: null,\n      })\n    })\n  }\n  render() {\n    const { name, imgUrl } = this.state\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {!name && <button onClick={this.signIn}>Log in</button>}\n          {!!name && <button onClick={this.signOut}>Log out</button>}\n          {!!name && <User name={name} imgUrl={imgUrl} />}\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}